/*
  SCSS for generating carets (little triangles)
  Inspired by https://codepen.io/grayghostvisuals/pen/GqzRox

*/
$default-caret-unit: 25px;

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin caret($point, $caret-unit, $color) {
  $opposite: opposite-direction($point);
  $border-width: ($caret-unit / 2);
  border: $border-width solid transparent;
  border-#{$opposite}: $border-width solid $color;
  border-#{$point}: 0;
  height: 0;
  width: 0;
  border-top-width: $caret-unit;
  content: '';
  display: block;
  position: relative;
  left: 0%;
  bottom: -$caret-unit * 1.1;
  transform-origin: center;
  transform: skew(-25deg);
  // transform: rotate(90deg) skew(-(strip-unit($caret-unit))+deg) translateY($caret-unit / 1.5);
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top': 'bottom',
    'right': 'left',
    'bottom': 'top',
    'left': 'right',
    'center': 'center',
    'ltr': 'rtl',
    'rtl': 'ltr'
  );
  @each $direction in $directions {
    $direction: to-lower-case($direction);
    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }
  @return $opposite-directions;
}
